This file contains all the api endpoints, the request method they accept and what they do
NOTE: FOR THE EXACT DATA TO BE SENT TO THE BACKEND YOU CAN ASK @Grey-A 

1. https://127.0.0.1:8000/api/ [GET]:
    
    This returns the available list of api_endpoints so just like this file except online

2. https://127.0.0.1:8000/api/user/register [POST]:

    This registers a new user(sign up), you send the username, full_name, email and password if user
    has been successfully created you will get a response that states "user has been created".

    FORMAT:
        {
            "full_name": "...",
            "email: "...",
            "username": "...",
            "password": "..."
        }
    
    RESPONSE:
    if success [status code is 201]:
        {
            "response": "User has been created"
        }
    if failed [status code is 400 with the errors in json format]

3. https://127.0.0.1:8000/api/user/token/ [POST]:

    This accepts the users email and password and then generates a jwt [refresh and access] which will be used to log in the user, access token expires in 1 hour and
    refresh token expires in 10 days

    FORMAT:
        {
            "email": "...",
            "password": "..."
        }
    RESPONSE:
    if success [status code 200]:
        {
            "refresh": "...",
            "access": "..."
        }
    if failed [status code 401]:
        {
            "detail": "No active account found with the given credentials"
        }


4. https://127.0.0.1:8000/api/user/token/refresh/ [POST]:

    This accepts the users refresh token to generate a new access token if it expires

    FORMAT:
        {
            "refresh": "..."
        }
    RESPONSE:
        if success [status code 200]:
            {
                "access": "..."
            }
        if failure [status code 401]:
            {
                "detail": "Token is invalid or expired",
                "code": "token_not_valid" or "token_expired"
            }


5. https://127.0.0.1:8000/api/user/token/blacklist/ [POST]:

    This accepts the users refresh token and then blacklists it e.g. it logs out the user therefore the user must log in
    when he enters the site again 
    NOTE: Make sure to dete the refresh and access token from the users local storage 

    FORMAT:
        {
            "refresh": "..."
        }
    RESPONSE:
        if success [status code 200]:
            {
                "Success": "User has been logged out"
            }
        if failed [status code 400]:
            {empty}


6. https://127.0.0.1:8000/api/call/create/ [POST]

    This accepts [host(user_id), channel_name(txt), scheld_time(NOTE: the format is YYYY-MM-DDThh:mm,
     you can ignore the seconds, e.g. 2015-10-22T18:17), and is_group which is either True or False]

     FORMAT:
        {
            "host": "....",
            "channel_name": "...",
            "scheld_time": "e.g. 2022-09-21T12:00",
            "is_group": "False" or "True"
        }
     if success [status code 201]:
        {
           "call_uid": "..." 
        }
    if failed [status code 400]:
        {
            {the errors}
        }


7. https://127.0.0.1:8000/api/call/milestone/create/ [POST]:

    This accepts the call_uid, the num(the order it appears) the title, the info and the duration which is a min of 5 and max of 60

    FORMAT:
        {
            "call": "...",
            "num": "...",
            "title": "...",
            "info": "...",
            "duration": "..."
        }
    RESPONSE:
        if success [status code 201]:
            {empty}
        if failed [status code 400]:
         {the errors}

8. https://127.0.0.1:8000/api/call/invite/create/ [POST]:

    This accepts the call_uid and the user_id to create an invite for that person

    FORMAT:
        {
            "call": "...",
            "user": "..."
        }
    RESPONSE:
        if success [status code 201]:
            {empty}
        if failed [status code 400]:
            {the errors}

9. https://127.0.0.1:8000/api/call/details/<uuid:uid>/ [GET]:

    This accepts the call uid in the field <uuid:uid> and returns the call duration, call details and
    milestones with their details

    FORMAT:
        https://127.0.0.1:8000/api/call/details/e.g. f7646dd9-1352-4e2c-828d-a1c4b7f435d0/
    RESPONSE:
        if success [status code 200]:
            {
                "DURATION": 10,
                "CALL": {
                    "uid": "f7646dd9-1352-4e2c-828d-a1c4b7f435d0",
                    "host": 1,
                    "channel_name": "postmantest",
                    "about": "",
                    "scheld_time": "2015-10-22T18:17:51Z",
                    "is_group": false
                },
                "MILESTONES": [
                    {
                        "call": "f7646dd9-1352-4e2c-828d-a1c4b7f435d0",
                        "num": 1,
                        "title": "milestone22",
                        "info": "noinfo",
                        "duration": 10
                    }
                ]
            }
        if failed [status code 404]:
        {html page of 404}

10. https://127.0.0.1:8000/api/user/invites/<int:pk>/ [GET]:

    This accepts the users_id in the fied <int:pk> and returns all the meetings the user was invited to, the date he
    was invited and the call uid.

    FORMAT:
         https://127.0.0.1:8000/api/user/invites/e.g. 5/
    
    RESPONSE:
        if success [status code 200]:
            [
                {
                    "call": "a802a121-4303-45e1-a6a4-c84000ce2195",
                    "user": 5,
                    "date_sent": "2022-08-22T11:09:59.100033Z",
                    "accepted": false
                }
            ]
        if failed [status code 404]:
            {html 404}
